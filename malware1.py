import os
import shutil
import time
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class CopyNewFileHandler(FileSystemEventHandler):
    def __init__(self, dest_directory):
        super().__init__()
        self.dest_directory = dest_directory

    def on_created(self, event):
        self.copy_file(event)

    def on_modified(self, event):
        self.copy_file(event)

    def check_directories_in_path(self, file_path, specified_directories, unwanted_directories):
        ab_file_path = os.path.abspath(file_path)
        components = []

        while True:
            ab_file_path, subdr = os.path.split(ab_file_path)
            if subdr:
                components.insert(0, subdr)
            else:
                # When tail is empty, we've reached the root
                components.insert(0, ab_file_path)
                break
        for directory in unwanted_directories:
            if directory in components:
                return 0
        for directory in specified_directories:
            if directory in components:
                return directory
        # If no match is found
        return 0
    
    def copy_file(self, event):
        if event.is_directory:
            return
        file_path = Path(event.src_path)
        # Exclude hidden files
        if file_path.name.startswith('.'):
            return
        # Attempt to get the current modification time, handling PermissionError
        try:
            current_modified_time = os.path.getmtime(file_path)
        except PermissionError:
            return
        except FileNotFoundError:
            # Handle the case where the file is not found
            return

        # Check if the file has been modified recently
        if current_modified_time > time.time() - 1:  # Modified within the last second
            dest_path = self.dest_directory / file_path.name
            unwanted_directories = ['AppData', 'Roaming']
            specified_directories = ['Desktop', 'Downloads', 'Music', 'Pictures', 'Videos', 'OneDrive', 'Favorites', 'Documents']
            directory = self.check_directories_in_path(file_path, specified_directories, unwanted_directories)
            if directory:
                # Copy file to New Files folder, replacing if necessary
                try:
                    shutil.copy2(file_path, dest_path)  # Use shutil.copy2 for preserving metadata
                except Exception as e:
                    return
            else:
                return

def watch_directories(directories, dest_directory):
    observer = Observer()
    handler = CopyNewFileHandler(dest_directory)

    for directory in directories:
        dir_path = Path(directory)
        if dir_path.exists():
            observer.schedule(handler, dir_path, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == "__main__":
    # Specify directories to watch on other drives
    direct = ["C:/Users"]
    # Create the 'New Files' folder in the same directory as the script
    new_files_folder = Path("C:/") / "New Files C Drive"
    os.makedirs(new_files_folder, exist_ok=True)
    # Watch specified directories on C drive
    watch_directories(direct, new_files_folder)