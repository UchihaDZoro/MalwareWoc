import os
import shutil
import time
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class CopyNewFileHandler(FileSystemEventHandler):
    def __init__(self, dest_directory):
        super().__init__()
        self.dest_directory = dest_directory

    def on_created(self, event):
        self.copy_file(event)

    def on_modified(self, event):
        self.copy_file(event)

    def copy_file(self, event):
        if event.is_directory:
            return

        file_path = Path(event.src_path)

        if file_path.name.startswith('.'):
            return

        # Get the current modification time
        try:
            current_modified_time = os.path.getmtime(file_path)
        except FileNotFoundError:
            return
        except Exception as e:
            return
        
        if current_modified_time > time.time() - 1:  # Modified within the last second
            dest_path = self.dest_directory / file_path.name

            # Copy file to New Files folder
            try:
                shutil.copy2(file_path, dest_path)
            except Exception as e:
                return 
            
def watch_directories(directories, dest_directory):
    observer = Observer()
    handler = CopyNewFileHandler(dest_directory)

    for directory in directories:
        dir_path = Path(directory)
        if dir_path.exists():
            observer.schedule(handler, dir_path, recursive=True)

    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()

    observer.join()

if __name__ == "__main__":
    other_drives_directories = ["D:/", "E:/", "F:/", "G:/", "H:/"]

    new_files_folder = Path("C:/") / "New Files For all Drives Except C"
    try:
        os.makedirs(new_files_folder, exist_ok=True)
    except Exception as e:
        exit(1)

    watch_directories(other_drives_directories, new_files_folder)
